Use stateful as a pattern for pages.
Use Statelles as a pattern for components/widgets.
============================================================================================================
APK = Android 
AAB = Android APP Bundle
flutter build apk --release
flutter build appbundle --release
============================================================================================================
MediaQuery.of(context).padding.top = the app status bar size.
MediaQuery.of(context).platformBrightness =  the current platform brightness.
Theme.of(context).brightness = the current context's brightness, can be different from device's one.
============================================================================================================
BOOKMARKS:
alt + k = toogle bookmark.
alt + \ = previous.
alt + z = next.
alt + h = list bookmarks from file.
ctrl + alt + 5 = list from all files.
ctrl + shift + alt + c = clear all bookmarks.
============================================================================================================
SINGLETON:
-A singleton allows you to access the same instace with the same state anywhere.
-By making the constructor private you prevent it from being initialized and stop being a singleton.
-By making instance as final you prevent it from being changed.
--RootController {
---RootController._();

---static final RootController instance = RootController._();
or:
---static RootController? controller;
---factory RootController() {
----if (controller == null) controller = RootController._();
----return controller!;
---}
--}
============================================================================================================
.OF(CONTEXT) CLASS:
-class AppColors {
-  AppColors._(this.context);
-  final BuildContext context;
-
-  factory AppColors.of(BuildContext context) => AppColors._(context);
-}
============================================================================================================
INTERFACE:
-Always set the variable as the interface and then instantiate some of this interface's implementation:
--final LocalStorageInterface storage = LocalStorage();
============================================================================================================
STORING LOCAL DATA:
-shared preferences
-hive
-sqlite
-path_provider
-flutter_secure_storage
-sembast
-many more...
Before storing, the data is only on the app state, it means in the RAM memory. => Search if it is correct.
Save smaller data:
-path_provider = local file (read and write one file on disk)
-shared_preferences = local key-value (key-value on disk, only primitive data, not designed to store a lot of data)
Save bigger data:
-sqflite = local database (persist and query large amounts of data)
-others
============================================================================================================
DATA BANK:
-One to one
-One to many
-Many to many

-Arquivos -> tabelas -> registos
-Armários -> pastas  -> fichas

-HISTÓRICO:
--Acesso Sequencial: Armazenamento em fitas de forma sequencial.
--Acesso Direto    : Armazenamento em discos permitiu índices.

--Modelo hierárquico.
--Modelo em rede.

-ATUALIDADE:
--Modelo relacional.
--Modelo documental.
--Modelo orientado a objetos.

-DB created by CODASYL, composed by:  
--Data base
--Data Manager System
--Query Language (Structured Querry Language)
--Aditional Programs

SOLUCTIONS:
-Empresarial: Oracle, IBM, dBase, SQL Server...
-Free: MySQL and MariaDB, PostgreSQL, SQLite...

DDL definição, DML manipulação, MQL solicitações, DCL controle, DTL transações.
DICA:
-Durability : Everything must remain the way you left until you wanna change.
-Isolation  : Transactions must not affect each other.
-Concistency: A transaction must not affect the DB.
-Atomicity  : Or a transaction fully succeed, or the DB keeps its previous state.

SQLite:
-An SQL DB embedded (embutido), serverless (sem server), no configuration and transactional.
-SQLite works directly on devices' disk.
-Suitable for small amounts of data.

-Operations take time, so they are async
============================================================================================================
SERVICES: local work, local storage, local functionalities (bluetooth, etc)
REPOSITORY: remote work
