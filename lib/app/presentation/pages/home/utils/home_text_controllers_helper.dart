part of '../home_cubit.dart';

extension HomeTextControllersHelper on HomeCubit {
  void initControllers({required Function emitOnMissing}) {
    totalCtrl.addListener(() {
      _removePunctuation(totalCtrl);

      _total = int.tryParse(totalCtrl.text);

      _onType();

      _commonsTyped.value = true;
    });
    soldCtrl.addListener(() {
      _removePunctuation(soldCtrl);

      _sold = int.tryParse(soldCtrl.text);

      _onType();
    });
    devCtrl.addListener(() {
      _removePunctuation(devCtrl);

      _devolution = int.tryParse(devCtrl.text);

      _onType();
      _autoGenerateMissingField();
    });
    missCtrl.addListener(() {
      _removePunctuation(missCtrl);

      _missing = int.tryParse(missCtrl.text);

      _onType();
      _autoGenerateDevField();

      emitOnMissing();
    });
    paidCtrl.addListener(() {
      _replaceCommaByDot(paidCtrl);

      _paid = double.tryParse(paidCtrl.text) ?? 0;

      _onType();
    });
    depositCtrl.addListener(() {
      _replaceCommaByDot(depositCtrl);

      _deposits = double.tryParse(depositCtrl.text) ?? 0;

      _onType();
    });
    taxCtrl.addListener(() {
      _replaceCommaByDot(taxCtrl);

      if (taxCtrl.text.contains(',')) taxCtrl.text = taxCtrl.text.replaceFirst(',', '.');

      _tax = double.tryParse(taxCtrl.text);

      _onType();
      _commonsTyped.value = true;
    });
    allowanceCtrl.addListener(() {
      _replaceCommaByDot(allowanceCtrl);

      _allowance = double.tryParse(allowanceCtrl.text);

      _onType();
      _commonsTyped.value = true;
    });
  }

  void _removePunctuation(TextEditingController ctrl) {
    if (ctrl.text.contains('.')) ctrl.text = ctrl.text.replaceAll('.', '');
    if (ctrl.text.contains(',')) ctrl.text = ctrl.text.replaceAll(',', '');
  }

  void _replaceCommaByDot(TextEditingController ctrl) {
    if (ctrl.text.contains(',')) ctrl.text = ctrl.text.replaceAll(',', '.');
  }

  void _autoGenerateMissingField() async {
    if (_blockAutoGenerate) return null;

    _blockAutoGenerate = true;

    if (_total != null && _sold != null && _devolution != null) {
      var value = _total! - (_sold! + _devolution!);

      _missing = value;
      missCtrl.text = _missing.toString();
    } else {
      _missing = null;
      missCtrl.text = '';
    }

    _blockAutoGenerate = false;
  }

  void _autoGenerateDevField() async {
    if (_blockAutoGenerate) return;

    _blockAutoGenerate = true;

    if (_total != null && _sold != null && _missing != null) {
      var value = _total! - (_sold! + _missing!);

      _devolution = value;
      devCtrl.text = _devolution.toString();
    } else {
      _devolution = null;
      devCtrl.text = '';
    }

    _blockAutoGenerate = false;
  }

  void _onType() async {
    await Future.delayed(const Duration(milliseconds: 500));

    _calculate();
  }
}
