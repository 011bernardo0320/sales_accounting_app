part of '../home_cubit.dart';

extension HomeTextControllersHelper on HomeCubit {
  void initControllers({required Function emitOnMissing}) {
    totalCtrl.addListener(() {
      _removePunctuation(totalCtrl);

      commonValues.totalCards = int.tryParse(totalCtrl.text);

      _onType();

      _commonsTyped.value = true;
    });
    soldCtrl.addListener(() {
      _removePunctuation(soldCtrl);

      raffle.sold = int.tryParse(soldCtrl.text);

      _onType();
    });
    devCtrl.addListener(() {
      _removePunctuation(devCtrl);

      raffle.devolution = int.tryParse(devCtrl.text);

      _onType();
      _autoGenerateMissingField();
    });
    missCtrl.addListener(() {
      _removePunctuation(missCtrl);

      raffle.missing = int.tryParse(missCtrl.text);

      _onType();
      _autoGenerateDevField();

      emitOnMissing();
    });
    paidCtrl.addListener(() {
      _replaceCommaByDot(paidCtrl);

      reckoning.money = double.tryParse(paidCtrl.text) ?? 0;

      _onType();
    });
    depositCtrl.addListener(() {
      _replaceCommaByDot(depositCtrl);

      reckoning.deposits = double.tryParse(depositCtrl.text) ?? 0;

      _onType();
    });
    taxCtrl.addListener(() {
      //TODO: add regex so that no unwanted chars come by paste, ex: %
      _replaceCommaByDot(taxCtrl);

      commonValues.tax = double.tryParse(taxCtrl.text);

      _onType();
      _commonsTyped.value = true;
    });
    allowanceCtrl.addListener(() {
      _replaceCommaByDot(allowanceCtrl);

      commonValues.allowance = double.tryParse(allowanceCtrl.text);

      _onType();
      _commonsTyped.value = true;
    });
  }

  void _removePunctuation(TextEditingController ctrl) {
    if (ctrl.text.contains('.')) ctrl.text = ctrl.text.replaceAll('.', '');
    if (ctrl.text.contains(',')) ctrl.text = ctrl.text.replaceAll(',', '');
  }

  void _replaceCommaByDot(TextEditingController ctrl) {
    if (ctrl.text.contains(',')) ctrl.text = ctrl.text.replaceAll(',', '.');
  }

  void _autoGenerateMissingField() async {
    if (_blockAutoGenerate) return null;

    _blockAutoGenerate = true;

    if (commonValues.totalCards != null && raffle.sold != null && raffle.devolution != null) {
      var value = commonValues.totalCards! - (raffle.sold! + raffle.devolution!);

      raffle.missing= value;
      missCtrl.text = raffle.missing.toString();
    } else {
      raffle.missing= null;
      missCtrl.text = '';
    }

    _blockAutoGenerate = false;
  }

  void _autoGenerateDevField() async {
    if (_blockAutoGenerate) return;

    _blockAutoGenerate = true;

    if (commonValues.totalCards != null && raffle.sold != null && raffle.missing!= null) {
      var value = commonValues.totalCards! - (raffle.sold! + raffle.missing!);

      raffle.devolution = value;
      devCtrl.text = raffle.devolution.toString();
    } else {
      raffle.devolution = null;
      devCtrl.text = '';
    }

    _blockAutoGenerate = false;
  }

  void _onType() async {
    await Future.delayed(const Duration(milliseconds: 500));

    _calculate();
  }
}
