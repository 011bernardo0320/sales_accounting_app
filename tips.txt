Use stateful as a pattern for pages.
Use Statelles as a pattern for components/widgets.

MediaQuery.of(context).padding.top = the app status bar size.
MediaQuery.of(context).platformBrightness =  the current platform brightness.
Theme.of(context).brightness = the current context's brightness, can be different from device's one.

BOOKMARKS:
alt + k = toogle bookmark.
alt + \ = previous.
alt + z = next.
alt + x = list bookmarks from file.
ctrl + alt + 5 = list from all files.
ctrl + shift + alt + c = clear all bookmarks.

SINGLETON:
-A singleton allows you to access the same instace with the same state anywhere.
-By making the constructor private you prevent it from being initialized and stop being a singleton.
-By making instance as final you prevent it from being changed.
--RootController {
---RootController._();

---static final RootController instance = RootController._();
--}

.OF(CONTEXT) CLASS:
-class AppColors {
-  AppColors._(this.context);
-  final BuildContext context;
-
-  factory AppColors.of(BuildContext context) => AppColors._(context);
-}

INTERFACE:
-Always set the variable as the interface and then instantiate some of this interface's implementation:
--final LocalStorageInterface storage = LocalStorage();

SOME PACKAGES FOR STORING LOCAL DATA:
-shared preferences
-hive
-sqlite
-many more...
Before storing, the data is only on the app state, it means in the RAM memory. => Search if it is correct.

Services: local work
Repository: remote work